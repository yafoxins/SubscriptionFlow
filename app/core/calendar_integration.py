import os
import json
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Any
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import requests
from app.models.subscription import Subscription

class CalendarIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏ (Google Calendar, Outlook)"""
    
    # Google Calendar API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    GOOGLE_SCOPES = ['https://www.googleapis.com/auth/calendar']
    GOOGLE_TOKEN_FILE = 'google_calendar_token.json'
    GOOGLE_CREDENTIALS_FILE = 'google_calendar_credentials.json'
    
    def __init__(self):
        self.google_service = None
        self.outlook_token = None
    
    # Google Calendar –º–µ—Ç–æ–¥—ã
    def setup_google_calendar(self, credentials_json: str) -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Calendar –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º credentials
            with open(self.GOOGLE_CREDENTIALS_FILE, 'w') as f:
                f.write(credentials_json)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            flow = InstalledAppFlow.from_client_secrets_file(
                self.GOOGLE_CREDENTIALS_FILE, self.GOOGLE_SCOPES)
            creds = flow.run_local_server(port=0)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            with open(self.GOOGLE_TOKEN_FILE, 'w') as token:
                token.write(creds.to_json())
            
            self.google_service = build('calendar', 'v3', credentials=creds)
            
            return {
                'success': True,
                'message': 'Google Calendar —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω'
            }
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Calendar: {str(e)}'
            }
    
    def _get_google_credentials(self) -> Optional[Credentials]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Google credentials"""
        creds = None
        
        if os.path.exists(self.GOOGLE_TOKEN_FILE):
            creds = Credentials.from_authorized_user_file(
                self.GOOGLE_TOKEN_FILE, self.GOOGLE_SCOPES)
        
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                return None
        
        return creds
    
    def add_subscription_to_google_calendar(self, subscription: Subscription) -> Dict[str, Any]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Google Calendar"""
        try:
            creds = self._get_google_credentials()
            if not creds:
                return {
                    'success': False,
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Google Calendar'
                }
            
            service = build('calendar', 'v3', credentials=creds)
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            event = {
                'summary': f'üí≥ {subscription.name} - {subscription.price} {subscription.currency}',
                'description': f'–ü–æ–¥–ø–∏—Å–∫–∞: {subscription.name}\n'
                             f'–¶–µ–Ω–∞: {subscription.price} {subscription.currency}\n'
                             f'–¶–∏–∫–ª: {subscription.billing_cycle}\n'
                             f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {subscription.category or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}',
                'start': {
                    'dateTime': subscription.next_billing_date.isoformat(),
                    'timeZone': 'Europe/Moscow',
                },
                'end': {
                    'dateTime': (subscription.next_billing_date + timedelta(hours=1)).isoformat(),
                    'timeZone': 'Europe/Moscow',
                },
                'reminders': {
                    'useDefault': False,
                    'overrides': [
                        {'method': 'email', 'minutes': 24 * 60},  # –ó–∞ –¥–µ–Ω—å
                        {'method': 'popup', 'minutes': 60},  # –ó–∞ —á–∞—Å
                    ],
                },
                'colorId': self._get_color_id_for_category(subscription.category),
            }
            
            event = service.events().insert(
                calendarId='primary',
                body=event,
                recurringEventId=None
            ).execute()
            
            return {
                'success': True,
                'message': '–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Calendar',
                'event_id': event['id']
            }
            
        except HttpError as error:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ Google Calendar API: {error}'
            }
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Google Calendar: {str(e)}'
            }
    
    def _get_color_id_for_category(self, category: Optional[str]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        color_map = {
            'streaming': '1',      # –ö—Ä–∞—Å–Ω—ã–π
            'software': '2',       # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            'music': '3',          # –ñ–µ–ª—Ç—ã–π
            'gaming': '4',         # –ó–µ–ª–µ–Ω—ã–π
            'education': '5',      # –ì–æ–ª—É–±–æ–π
            'fitness': '6',        # –°–∏–Ω–∏–π
            'news': '7',           # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            'productivity': '8',   # –†–æ–∑–æ–≤—ã–π
            'security': '9',       # –°–µ—Ä—ã–π
            'storage': '10',       # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
        }
        return color_map.get(category, '11')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–ª—ã–π
    
    def update_subscription_in_google_calendar(self, subscription: Subscription, event_id: str) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Google Calendar"""
        try:
            creds = self._get_google_credentials()
            if not creds:
                return {
                    'success': False,
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Google Calendar'
                }
            
            service = build('calendar', 'v3', credentials=creds)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            event = {
                'summary': f'üí≥ {subscription.name} - {subscription.price} {subscription.currency}',
                'description': f'–ü–æ–¥–ø–∏—Å–∫–∞: {subscription.name}\n'
                             f'–¶–µ–Ω–∞: {subscription.price} {subscription.currency}\n'
                             f'–¶–∏–∫–ª: {subscription.billing_cycle}\n'
                             f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {subscription.category or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}',
                'start': {
                    'dateTime': subscription.next_billing_date.isoformat(),
                    'timeZone': 'Europe/Moscow',
                },
                'end': {
                    'dateTime': (subscription.next_billing_date + timedelta(hours=1)).isoformat(),
                    'timeZone': 'Europe/Moscow',
                },
                'colorId': self._get_color_id_for_category(subscription.category),
            }
            
            updated_event = service.events().update(
                calendarId='primary',
                eventId=event_id,
                body=event
            ).execute()
            
            return {
                'success': True,
                'message': '–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Google Calendar'
            }
            
        except HttpError as error:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ Google Calendar API: {error}'
            }
    
    def delete_subscription_from_google_calendar(self, event_id: str) -> Dict[str, Any]:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ Google Calendar"""
        try:
            creds = self._get_google_credentials()
            if not creds:
                return {
                    'success': False,
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Google Calendar'
                }
            
            service = build('calendar', 'v3', credentials=creds)
            
            service.events().delete(
                calendarId='primary',
                eventId=event_id
            ).execute()
            
            return {
                'success': True,
                'message': '–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Google Calendar'
            }
            
        except HttpError as error:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ Google Calendar API: {error}'
            }
    
    # Outlook –º–µ—Ç–æ–¥—ã
    def setup_outlook_calendar(self, access_token: str) -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Outlook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            self.outlook_token = access_token
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ API
            headers = {
                'Authorization': f'Bearer {access_token}',
                'Content-Type': 'application/json'
            }
            
            response = requests.get(
                'https://graph.microsoft.com/v1.0/me/calendarView',
                headers=headers,
                params={'top': 1}
            )
            
            if response.status_code == 200:
                return {
                    'success': True,
                    'message': 'Outlook Calendar —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω'
                }
            else:
                return {
                    'success': False,
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Outlook Calendar'
                }
                
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Outlook: {str(e)}'
            }
    
    def add_subscription_to_outlook_calendar(self, subscription: Subscription) -> Dict[str, Any]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Outlook Calendar"""
        try:
            if not self.outlook_token:
                return {
                    'success': False,
                    'message': 'Outlook –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'
                }
            
            headers = {
                'Authorization': f'Bearer {self.outlook_token}',
                'Content-Type': 'application/json'
            }
            
            event = {
                'subject': f'üí≥ {subscription.name} - {subscription.price} {subscription.currency}',
                'body': {
                    'contentType': 'text',
                    'content': f'–ü–æ–¥–ø–∏—Å–∫–∞: {subscription.name}\n'
                              f'–¶–µ–Ω–∞: {subscription.price} {subscription.currency}\n'
                              f'–¶–∏–∫–ª: {subscription.billing_cycle}\n'
                              f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {subscription.category or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}'
                },
                'start': {
                    'dateTime': subscription.next_billing_date.isoformat(),
                    'timeZone': 'Europe/Moscow'
                },
                'end': {
                    'dateTime': (subscription.next_billing_date + timedelta(hours=1)).isoformat(),
                    'timeZone': 'Europe/Moscow'
                },
                'reminderMinutesBeforeStart': 60,
                'isReminderOn': True
            }
            
            response = requests.post(
                'https://graph.microsoft.com/v1.0/me/events',
                headers=headers,
                json=event
            )
            
            if response.status_code == 201:
                event_data = response.json()
                return {
                    'success': True,
                    'message': '–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Outlook Calendar',
                    'event_id': event_data['id']
                }
            else:
                return {
                    'success': False,
                    'message': f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Outlook: {response.text}'
                }
                
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Outlook: {str(e)}'
            }
    
    def get_calendar_events(self, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π"""
        events = []
        
        # Google Calendar —Å–æ–±—ã—Ç–∏—è
        try:
            creds = self._get_google_credentials()
            if creds:
                service = build('calendar', 'v3', credentials=creds)
                
                events_result = service.events().list(
                    calendarId='primary',
                    timeMin=start_date.isoformat() + 'Z',
                    timeMax=end_date.isoformat() + 'Z',
                    singleEvents=True,
                    orderBy='startTime'
                ).execute()
                
                for event in events_result.get('items', []):
                    events.append({
                        'source': 'google',
                        'id': event['id'],
                        'title': event['summary'],
                        'description': event.get('description', ''),
                        'start': event['start'].get('dateTime'),
                        'end': event['end'].get('dateTime'),
                        'color': event.get('colorId', '11')
                    })
        except Exception:
            pass
        
        # Outlook —Å–æ–±—ã—Ç–∏—è
        try:
            if self.outlook_token:
                headers = {
                    'Authorization': f'Bearer {self.outlook_token}',
                    'Content-Type': 'application/json'
                }
                
                response = requests.get(
                    'https://graph.microsoft.com/v1.0/me/calendarView',
                    headers=headers,
                    params={
                        'startDateTime': start_date.isoformat(),
                        'endDateTime': end_date.isoformat()
                    }
                )
                
                if response.status_code == 200:
                    outlook_events = response.json().get('value', [])
                    for event in outlook_events:
                        events.append({
                            'source': 'outlook',
                            'id': event['id'],
                            'title': event['subject'],
                            'description': event.get('bodyPreview', ''),
                            'start': event['start']['dateTime'],
                            'end': event['end']['dateTime']
                        })
        except Exception:
            pass
        
        return events 